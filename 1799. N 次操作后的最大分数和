class Solution {
public:
    int maxScore(vector<int>& nums) {
        int m = nums.size();
        //状态压缩,用第i位表示第i个数有无被删除
        vector<int> dp(1 << m, 0);
        //保存gcd结果
        vector<vector<int>> gcd_tmp(m, vector<int>(m,0));
        for(int i = 0; i < m; i++){
            for(int j = i + 1; j < m; j++){
                gcd_tmp[i][j] = gcd(nums[i],nums[j]);
            }
        }
        int all = 1 << m;
        for(int s = 1; s < all; ++s){
            //计算s的二进制有多少个1
            int t = __builtin_popcount(s);
            //t为奇数,不合法,跳过
            if(t & 1){
                continue;
            }
            for(int i = 0; i < m; ++i){
                //第i个数未被删除
                if((s >> i) & 1){
                    for(int j = i + 1; j < m; ++j){
                        if((s >> j) & 1){
                            dp[s] = max(dp[s],dp[s ^ (1 << i) ^ (1 << j)] + t / 2 * gcd_tmp[i][j]);
                        }
                    }
                }
            }
        }
        return dp[all - 1];
    }
};
