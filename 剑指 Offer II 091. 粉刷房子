//dp 空间o(n)
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n = costs.size();
        vector<vector<int>> dp(n,vector<int>(3));
        dp[0] = costs[0];
        for(int i = 1; i < n; i++){
           dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + costs[i][0];
           dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + costs[i][1];
           dp[i][2] = min(dp[i-1][1], dp[i-1][0]) + costs[i][2];
        }
        int res = min(dp[n-1][1],dp[n-1][2]);
        return min(res,dp[n-1][0]);
    }
};

//滚动数组
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n = costs.size();
        int c1 = costs[0][0], c2 = costs[0][1], c3 = costs[0][2];
        for(int i = 1; i < n; i++){
            int tmp1 = min(c2,c3) + costs[i][0];
            int tmp2 = min(c1,c3) + costs[i][1];
            int tmp3 = min(c1,c2) + costs[i][2];
            c1 = tmp1;
            c2 = tmp2;
            c3 = tmp3;
        }
        int res = min(c1,c2);
        return min(res,c3);
    }
};
