class Solution {
private:
    int maximalRectangle(vector<int> heights){
        int n = heights.size();
        vector<int> left(n);
        vector<int> right(n,n);
        vector<int> s;
        for(int i = 0; i < n; i++){
            while(!s.empty()&&heights[s.back()]>=heights[i]){
                right[s.back()] = i;
                s.pop_back();
            }
            left[i] = s.empty()? -1:s.back();
            s.push_back(i);
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            int temp = heights[i]*(right[i]-left[i]-1);
            res = max(res,temp);
        }

        return res;
    }
public:
    int maximalRectangle(vector<string>& matrix) {
        int m = matrix.size();
        if(m==0)return 0;
        int n = matrix[0].size();
        int area = 0;
        vector<int> heights(n,0);
        for(string row:matrix){
            for (int i = 0; i < n; i++){
                heights[i]=row[i]=='0'?0:heights[i]+1;
            }
            //每次读入一层row,得到一个直方图,计算最大面积
            area = max(area,maximalRectangle(heights));
        }
        return area;
    }
};
