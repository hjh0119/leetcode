//字典树加贪心:将数化为二进制,从高位往低位找,每次尽量选择[不同位],最终得到的答案为最优解,证明见https://leetcode.cn/problems/ms70jA/solution/by-ac_oier-d9kx/
struct Trie{
    //left--0,right--1
    Trie * left = nullptr;
    Trie * right = nullptr;
};
class Solution {
private:
    Trie* root = new Trie();
    static constexpr int HIGH_BIT = 30;
public:
    //把num加入字典树
    void add(int num){
        Trie *cur = root;
        for(int i = HIGH_BIT; i >= 0; i--){
            int bit = (num >> i) & 1;
            if(bit == 0){
                if(cur->left == nullptr){
                    cur -> left = new Trie();
                }
                cur = cur -> left;
            }else{
                if(cur->right == nullptr){
                    cur -> right = new Trie();
                }
                cur = cur -> right;
            }
        }
    }
    
    int check(int num){
        Trie* cur = root;
        int x = 0;
        for(int k = HIGH_BIT; k >= 0; k--){
            int bit = (num >> k) & 1;
            if(bit == 0){
                if(cur -> right){
                    cur = cur -> right;
                    x = x * 2 + 1;
                }else{
                    cur = cur ->left;
                    x = x * 2;
                }
            }
            else{
                if(cur->left){
                    cur = cur -> left;
                    x = x * 2 + 1;
                }else{
                    cur = cur -> right;
                    x = x * 2;
                }
            }
        }
        return x;
    }

    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        int x = 0;
        for(int i = 1; i < n; i++){
            add(nums[i-1]);
            x = max(x,check(nums[i]));
        }
        return x;
    }
};

