//空间复杂度O(mn)
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        vector<vector<int>> dp(grid.size(),vector<int>(grid[0].size(),0));
        dp[0][0]=grid[0][0];
        for(int i=1;i<grid.size();i++)dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int i=1;i<grid[0].size();i++)dp[0][i]=dp[0][i-1]+grid[0][i];
        for(int i=1;i<grid.size();i++){
            for(int j=1;j<grid[0].size();j++){
                dp[i][j]=max(dp[i-1][j],dp[i][j-1])+grid[i][j];
            }
        }
        return dp[grid.size()-1][grid[0].size()-1];
    }
};

//空间复杂度O(1)
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {   
        int n=grid.size(),m=grid[0].size();
        for(int i=1;i<m;i++)grid[0][i]+=grid[0][i-1];
        for(int i=1;i<n;i++)grid[i][0]+=grid[i-1][0];
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                grid[i][j]+=max(grid[i-1][j],grid[i][j-1]);
            }
        }
        return grid[n-1][m-1];
    }
};
