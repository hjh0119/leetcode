//排序+双指针,时间复杂度O(nlogn)
class Solution {
public:
    vector<int> v;
    void inOrder(TreeNode* root){
        if(root->left!=nullptr)inOrder(root->left);
        v.push_back(root->val);
        if(root->right!=nullptr)inOrder(root->right);
    }
    bool findTarget(TreeNode* root, int k) {
        inOrder(root);
        sort(v.begin(),v.end());
        int i =0, j = v.size()-1;
        while(i < j){
            if(v[i] + v[j] > k)j--;
            else if(v[i] + v[j] < k)i++;
            else return true;
        }
        return false;
    }
};

//递归+hash      时间复杂度O(n)
class Solution {
public:
    unordered_set<int> s;
    bool findTarget(TreeNode* root, int k) {
        if(root == nullptr)return false;
        if(s.count(k-root->val))return true;
        s.insert(root->val);
        return findTarget(root->left,k)||findTarget(root->right,k);
    }
};
