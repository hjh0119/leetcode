class Solution {
public:
    int dijkstra(vector<vector<pair<int,int>>>&g,int start){
        vector<int> dist(g.size(),INT_MAX);
        dist[start] = 0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> pq;
        pq.emplace(0,start);
        while(!pq.empty()){
            auto [d,x] = pq.top();
            pq.pop();
            if(d > dist[x])continue;
            for(auto [y,wd]: g[x]){
                int new_d = wd + d;
                if(new_d < dist[y]){
                    dist[y] = new_d;
                    pq.emplace(new_d,y);
                }
            }
        }
        int res = 0;
        for(auto d: dist){
            res = max(res,d);
        }
        return res;
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> g(n);
        for(auto &edge: times){
            int u = edge[0] - 1, v = edge[1] - 1, dist = edge[2];
            g[u].emplace_back(v,dist);
        }
        int d = dijkstra(g,k-1);
        return d==INT_MAX? -1:d;
    }
};
