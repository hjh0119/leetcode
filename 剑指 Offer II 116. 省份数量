//并查集
class Solution {
public:
    int find(vector<int>& parent, int index){
        if(parent[index] != index){
            parent[index] = find(parent,parent[index]);
        }
        return parent[index];
    }
    
    void Union(vector<int>& parent, int idx1, int idx2){
        parent[find(parent,idx1)] = find(parent,idx2);
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> parent(n);
        for(int i = 0; i < n; i++)parent[i] = i;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(isConnected[i][j] == 1)Union(parent,i,j);
            }
        }
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(parent[i] == i)cnt++;
        }
        return cnt;
    }
};
