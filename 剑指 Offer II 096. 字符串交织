//二维dp
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.size(), n = s2.size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,false));
        int k = s3.size();
        if(m + n != k){
            return false;
        }
        dp[0][0] = true;
        for(int i = 0; i <= m; i++){
            for(int j = 0; j <= n; j++){
                int p = i + j - 1;
                if( j> 0){
                    dp[i][j] |= (dp[i][j-1] && s2[j - 1] == s3[p]);
                }
                if(i > 0){
                    dp[i][j] |= (dp[i - 1][j] && s1[i - 1] == s3[p]);
                }
            }
        }
        return dp[m][n];
    }
};

//一维dp
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.size(), n = s2.size();
        vector<int> dp(n+1,false);
        int k = s3.size();
        if(m + n != k){
            return false;
        }
        dp[0] = true;
        for(int i = 0; i <= m; i++){
            for(int j = 0; j <= n; j++){
                int p = i + j - 1;
                if (i > 0) {
                    dp[j] &= (s1[i - 1] == s3[p]);
                }
                if (j > 0){
                    dp[j] |= (dp[j-1] && s2[j-1] == s3[p]);
                }
            }
        }
        return dp[n];
    }
};
