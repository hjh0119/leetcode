//dp 空间O(n)
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n+1);
        dp[0] = 0;
        dp[1] = 0;
        for(int i = 2;i <= n; i++){
            dp[i] = min(dp[i-2]+cost[i-2],dp[i-1]+cost[i-1]);
        }
        return dp[n];
    }
};

//滚动数组
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        int prev1 = 0, prev2 = 0, res = 0;
        for(int i = 2;i <= n; i++){
            res = min(prev1+cost[i-2],prev2+cost[i-1]);
            prev1 = prev2;
            prev2 = res;
        }
        return res;
    }
};
