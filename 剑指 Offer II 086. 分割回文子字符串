//回溯,用dp预处理回文子串
class Solution {
public:
    vector<vector<bool>> f;
    vector<vector<string>> res;
    vector<string> path;
    int n;

    void backTrack(string_view s, int i){
        if(i == n){
            res.push_back(path);
            return;
        }
        for(int j = i; j < n; ++j){
            if(f[i][j]){
                path.emplace_back(s.substr(i,j-i+1));
                backTrack(s,j+1);
                path.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        n = s.size();
        f.resize(n,vector<bool>(n,true));
        for(int i = n - 2; i >= 0; --i){
            for(int j = i + 1; j < n; ++j){
                f[i][j] = (s[i] == s[j]) && f[i+1][j-1];
            }
        }
        backTrack(s,0);
        return res;
    }
};
