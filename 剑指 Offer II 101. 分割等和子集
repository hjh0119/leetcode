//二维DP
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0, maxNum = 0, n = nums.size();
        for (auto num: nums){
            maxNum = max(maxNum, num);
            sum += num;
        }
        if(sum % 2 != 0 || n < 2 || maxNum * 2 > sum)return false;
        sum /= 2;
        //dp[i][j] 表示nums[0~i]能否组成j
        vector<vector<bool>> dp(n, vector<bool>(sum+1, false));
        for(int i = 0; i < n; i++)dp[i][0] = true;
        for(int i = 1; i < n; i++){
            int num = nums[i];
            for(int j = 1; j <= sum; j++){
                if(j >= num){
                    dp[i][j] = dp[i-1][j] | dp[i-1][j-num];
                }
                else dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n-1][sum];
    }
};

//滚动数组,一维DP
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0, maxNum = 0, n = nums.size();
        for (auto num: nums){
            maxNum = max(maxNum, num);
            sum += num;
        }
        if(sum % 2 != 0 || n < 2 || maxNum * 2 > sum)return false;
        sum /= 2;
        vector<bool> dp(sum+1, false);
        dp[0] = true;
        for(int i = 1; i < n; i++){
            int num = nums[i];
            for(int j = sum; j >= 1; j--){
                if(j >= num){
                    dp[j] = dp[j] | dp[j-num];
                }
            }
        }
        return dp[sum];
    }
};
