//大顶堆,删除k-1次堆顶
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq;
        for(auto num: nums){
            pq.push(num);
        }
        while(--k){
            pq.pop();
        }
        return pq.top();
    }
};

//官解,快排
class Solution {
public:
    int quickSelect(vector<int>& a, int l, int r, int index){
        int q = randomPartition(a,l,r);
        if (q == index){
            return a[q];
        }else{
               return q < index? quickSelect(a,q+1,r,index) : quickSelect(a,l,q-1,index);
        }
    }

    inline int randomPartition(vector<int> &a, int l, int r){
        int i = rand() % (r - l + 1) + l;
        swap(a[i],a[r]);
        return partition(a,l,r);
    }

    inline int partition(vector<int> &a, int l, int r){
        int x = a[r], i = l - 1;
        for(int j = l; j < r; ++j){
            if(a[j] <= x){
                swap(a[j],a[++i]);
            }
        }
        swap(a[i+1],a[r]);
        return i+1;
    }
    int findKthLargest(vector<int>& nums, int k) {
        srand(time(0));
        return quickSelect(nums,0,nums.size()-1,nums.size() - k);
    }
};
