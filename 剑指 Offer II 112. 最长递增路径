//官解, 记忆化dfs,用一个记忆数组保存遍历结果
class Solution {
public:
    static constexpr int dirs[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
    int rows,cols;
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size() == 0){
            return 0;
        }
        rows = matrix.size();
        cols = matrix[0].size();
        vector<vector<int>> memo (rows,vector<int>(cols));
        int ans = 0;
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                ans = max(ans,dfs(matrix,i,j,memo));
            }
        }
        return ans;     
    }
    int dfs(const vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& memo){
        if(memo[row][col] != 0){
            return memo[row][col];
        }
        ++memo[row][col];
        for(int i = 0; i < 4; i++){
            int newRow = row +dirs[i][0], newcol = col +dirs[i][1];
            if(newRow >= 0 && newcol >= 0 && newRow < rows && newcol < cols &&matrix[newRow][newcol] > matrix[row][col]){
                memo[row][col] = max(memo[row][col], dfs(matrix,newRow,newcol,memo)+1);
            }
        }
        return memo[row][col];
    }
};
