//二分 O(nlogn),O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int n = numbers.size();
        for(int i = 0; i < n; i++){
            //剪枝
            if(i && numbers[i-1] == numbers[i])continue;
            int left = i + 1, right = n - 1;
            int tmp = target - numbers[i];
            while(left <= right){
                int mid = left + (right - left) / 2;
                if(numbers[mid] > tmp){
                    right = mid - 1;
                }else if(numbers[mid] < tmp){
                    left = mid + 1;
                }else{
                    return {i + 1, mid + 1};
                }
            }
        }
        return {};
    }
};

//双指针 O(n),O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        for(int i = 0, j = numbers.size() - 1; i < j;){
            int sum = numbers[i] + numbers[j];
            if(sum == target) return{i+1,j+1};
            if(sum > target) j--;
            else i++;
        }
        return {};
    }
};
