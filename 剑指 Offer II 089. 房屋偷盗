//经典dp
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        //dp[i][0]表示第i个房间不偷,前i个房间最大值;dp[i][1]表示第i个房间偷,同理
        vector<vector<int>> dp(n,vector<int>(2));
        dp[0][0] = 0,dp[0][1] = nums[0];
        for(int i = 1; i < n; i++){
            dp[i][0] = max(dp[i-1][0],dp[i-1][1]);
            dp[i][1] = dp[i-1][0] + nums[i];
        }
        return max(dp[n-1][0],dp[n-1][1]);
    }
};

//滚动数组
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        //dp[i][0]表示第i个房间不偷,前i个房间最大值;dp[i][1]表示第i个房间偷,同理
        int dp0 = 0,dp1 = nums[0];
        for(int i = 1; i < n; i++){
            int tmp0 = max(dp0,dp1);
            dp1 = dp0+ nums[i];
            dp0 = tmp0;
        }
        return max(dp0,dp1);
    }
};
