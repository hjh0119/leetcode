//并查集
class Solution {
public:
    int find(vector<int>& parent, int index){
        if(parent[index] != index){
            parent[index] = find(parent,parent[index]);
        }
        return parent[index];
    }

    void Union(vector<int> &parent, int index1, int index2){
        parent[find(parent,index1)] = find(parent,index2);
    }

    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n+1);
        for (int i = 1; i <= n; i++){
            parent[i] = i;
        }
        for (auto& edge: edges){
            int node1 = edge[0], node2 = edge[1];
            if(find(parent,node1) != find(parent,node2)){
                Union(parent,node1,node2);
            }else{
                return edge;
            }
        }
        return vector<int>{};
    }
};
