//二维dp
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1,0));
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(text1[i-1] == text2[j-1]){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
};

//一维dp
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<int> dp(n + 1);
        for(int i = 1; i <= m; i++){
            char c = text1[i-1];
            int pre = dp[0];
            for(int j = 1; j <= n; j++){
                char c2 = text2[j-1];
                int nextPre = dp[j];
                dp[j] = c == c2? pre + 1 : max(dp[j],dp[j-1]);
                pre = nextPre;
            }
        }
        return dp[n];
    }
};
