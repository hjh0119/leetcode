class Solution {
private:
    int target;
    int res = -1e5;
    void dfs(vector<int> &t, int i ,int sum){
        if(i == t.size()){
            if(abs(sum-target)<abs(res-target)||(abs(sum-target)==abs(res-target)&&sum<res)){
                res = sum;
            }
            return;
        }
        dfs(t,i+1,sum);
        dfs(t,i+1,sum+t[i]);
        dfs(t,i+1,sum+t[i]*2);
    }
public:
    int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) {
        this->target = target;
        for(int i = 0; i < baseCosts.size(); i++){
            dfs(toppingCosts,0,baseCosts[i]);
        }
        return res;
    }
};
