/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //解法一,设置set记录当前节点是否遍历过
 //遍历On,count logn,总时间复杂度O(nlogn),空间复杂度On
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_set<ListNode*> s;
        ListNode* cur=head;
        while(cur!=nullptr){
            if(s.count(cur))return cur;
            s.insert(cur);
            cur=cur->next;
        }
        return nullptr;
    }
};

//解法二,快慢指针
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head==nullptr||head->next==nullptr)return nullptr;
        ListNode*fast=head,*slow=head;
        while(fast!=nullptr&&fast->next!=nullptr){
            fast=fast->next->next;
            slow=slow->next;
            if(slow==fast)break;
        }
        if(slow!=fast)return nullptr;
        fast=head;
        while(slow!=fast){
            fast=fast->next;
            slow=slow->next;
        }
        return slow;
    }
};
